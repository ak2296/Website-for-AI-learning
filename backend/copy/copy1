// src/pages/dashboard.tsx
import React, { useState, useEffect } from "react";
import { Container, Typography, Grid, Button, TextField, Tabs, Tab, Card, CardContent, CardActions, Box, Divider } from "@mui/material";
import { useTheme } from "@mui/material/styles";
import axios from 'axios';
import type { ChangeEvent } from "react"; // Type-only import for ChangeEvent
import { Height } from "@mui/icons-material";

// Define types for TypeScript
type FileInput = File | null;
type FileData = {
  id: number;
  imagePath?: string;
  filePath?: string;
  title?: string;
  description?: string;
  type: string;
};

const Dashboard: React.FC = () => {
  const theme = useTheme();
  const [resourceFile, setResourceFile] = useState<FileInput>(null);
  const [resourceTitle, setResourceTitle] = useState("");
  const [resourceDescription, setResourceDescription] = useState("");
  const [homeFile, setHomeFile] = useState<FileInput>(null);
  const [homeTitle, setHomeTitle] = useState("");
  const [homeDescription, setHomeDescription] = useState("");
  const [aboutFile, setAboutFile] = useState<FileInput>(null);
  const [aboutTitle, setAboutTitle] = useState("");
  const [aboutDescription, setAboutDescription] = useState("");
  const [files, setFiles] = useState<FileData[]>([]);
  const [tabValue, setTabValue] = useState(0);

  useEffect(() => {
    fetchHomeData();
  }, []);

  const fetchHomeData = async () => {
    try {
      const response = await axios.get('http://localhost:5000/api/home');
      if (response.status === 200 && response.data) {
        setFiles([{ ...response.data, type: "home" }]);
      } else {
        setFiles([]);
      }
    } catch (error: unknown) {
      console.error('Error fetching home data:', error);
      setFiles([]);
    }
  };

  const handleFileChange = (event: ChangeEvent<HTMLInputElement>, setFile: (file: FileInput) => void) => {
    if (event.target.files && event.target.files.length > 0) {
      setFile(event.target.files[0]);
    }
  };

  const handleUpload = async (type: string, file: FileInput, title: string, description: string) => {
    if (!file) return;

    const formData = new FormData();
    formData.append('image', file);
    formData.append('title', title);
    formData.append('description', description);
    formData.append('content', ''); // Placeholder, adjust as needed
    formData.append('mediaType', file.type);

    try {
      await axios.post('http://localhost:5000/api/home', formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });
      alert(`${type} uploaded successfully`);
      fetchHomeData();
    } catch (error: unknown) {
      console.error(`Error uploading ${type}:`, error);
      alert(`Upload failed: ${(error as Error).message || 'Unknown error'}`);
    }
  };

  const handleDelete = async (id: number) => {
    try {
      await axios.delete(`http://localhost:5000/api/home/${id}`);
      fetchHomeData();
    } catch (error: unknown) {
      console.error('Error deleting file:', error);
      alert('Delete failed');
    }
  };

  const handleTabChange = (_: unknown, newValue: number) => { // Changed to ignore event
    setTabValue(newValue);
  };

  return (
    <Container sx={{ padding: 3, backgroundColor: theme.palette.background.default, minHeight: "100vh" }}>
      <Typography variant="h3" color={theme.palette.text.primary} gutterBottom>Admin Dashboard</Typography>
      <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: '24px' }}>
        {/* Left Column - Forms with Tabs */}
        <Grid component="div" sx={{ flex: '1 1 100%', maxWidth: '100%' }}>
          <Tabs value={tabValue} onChange={handleTabChange} aria-label="dashboard tabs">
            <Tab label="Resources" />
            <Tab label="Home" />
            <Tab label="About" />
          </Tabs>
          {tabValue === 0 && (
            <Card>
              <CardContent>
                <Typography variant="h6">Resources</Typography>
                <input
                  type="file"
                  accept=".png,.jpg,.txt,.pdf,.mp4,.mov"
                  onChange={(e) => handleFileChange(e, setResourceFile)}
                />
                <TextField
                  label="Title"
                  value={resourceTitle}
                  onChange={(e) => setResourceTitle(e.target.value)}
                  fullWidth
                  margin="normal"
                />
                <TextField
                  label="Description"
                  value={resourceDescription}
                  onChange={(e) => setResourceDescription(e.target.value)}
                  fullWidth
                  margin="normal"
                  multiline
                />
                <Button
                  variant="contained"
                  onClick={() => handleUpload("resources", resourceFile, resourceTitle, resourceDescription)}
                  sx={{ mt: 2 }}
                >
                  Upload
                </Button>
              </CardContent>
            </Card>
          )}
          {tabValue === 1 && (
            <Card>
              <CardContent>
                <Typography variant="h6">Home</Typography>
                <input
                  type="file"
                  accept=".png,.jpg"
                  onChange={(e) => handleFileChange(e, setHomeFile)}
                />
                <TextField
                  label="Title"
                  value={homeTitle}
                  onChange={(e) => setHomeTitle(e.target.value)}
                  fullWidth
                  margin="normal"
                />
                <TextField
                  label="Description"
                  value={homeDescription}
                  onChange={(e) => setHomeDescription(e.target.value)}
                  fullWidth
                  margin="normal"
                  multiline
                />
                <Button
                  variant="contained"
                  onClick={() => handleUpload("home", homeFile, homeTitle, homeDescription)}
                  sx={{ mt: 2 }}
                >
                  Upload
                </Button>
              </CardContent>
            </Card>
          )}
          {tabValue === 2 && (
            <Card>
              <CardContent>
                <Typography variant="h6">About</Typography>
                <input
                  type="file"
                  accept=".png,.jpg"
                  onChange={(e) => handleFileChange(e, setAboutFile)}
                />
                <TextField
                  label="Title"
                  value={aboutTitle}
                  onChange={(e) => setAboutTitle(e.target.value)}
                  fullWidth
                  margin="normal"
                />
                <TextField
                  label="Description"
                  value={aboutDescription}
                  onChange={(e) => setAboutDescription(e.target.value)}
                  fullWidth
                  margin="normal"
                  multiline
                  disabled
                />
                <Button
                  variant="contained"
                  onClick={() => handleUpload("about", aboutFile, aboutTitle, aboutDescription)}
                  sx={{ mt: 2 }}
                >
                  Upload
                </Button>
              </CardContent>
            </Card>
          )}
        </Grid>
        {/* Right Column - Uploaded Files */}
        <Grid component="div" sx={{ flex: '1 1 100%', maxWidth: '100%',mt:6 }}>
          <Card  sx={{ boxShadow: 'none',  border: '1px solid #ccc' }}> {/* Remove shadow */}
            <CardContent>
              <Typography variant="h6" >Uploaded Files</Typography>
              <Divider  sx={{mb:5, width:'150px'}}/>
              {files.map((file) => (
                <Card key={file.id} sx={{ mb: 2, display: 'flex', justifyContent: 'space-between'}} >
                  <CardContent sx={{display: 'flex', flexDirection: 'row', alignItems: 'center', gap: '16px'}}>
                   
                    {file.imagePath && (
                      <img
                        src={`http://localhost:5000/uploads/${file.imagePath}`}
                        alt={file.title || "Image"}
                        style={{ maxWidth: "100%", maxHeight: "40px" }}
                      />
                    )}
                     <Typography variant="h6">{file.title || "Untitled"}</Typography>
                    <Typography variant="body2">{file.description || "No description"}</Typography>
                  </CardContent>
                  <CardActions>
                    <Button
                      variant="contained"
                      color="error"
                      onClick={() => handleDelete(file.id)}
                    >
                      Delete
                    </Button>
                  </CardActions>
                </Card>
              ))}
            </CardContent>
          </Card>
        </Grid>
      </Box>
    </Container>
  );
};

export default Dashboard;